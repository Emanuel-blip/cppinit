#!/usr/bin/env bash

# cppinit - Professional C++ Project Initializer
# Version: 1.0.0
# Author: C++ Project Initializer Team
# License: MIT

# Exit on errors, undefined variables, and fail pipelines if any command fails
set -euo pipefail

# ============================================================================
# SCRIPT DIRECTORY RESOLUTION
# ============================================================================
# Get the absolute path to this script, resolving any symlinks.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# ============================================================================
# SOURCE LIBRARY FILES
# ============================================================================
source "$SCRIPT_DIR/lib/helpers/utils.sh"
source "$SCRIPT_DIR/lib/core/config.sh"
source "$SCRIPT_DIR/lib/core/input_handler.sh"
source "$SCRIPT_DIR/lib/core/directory_manager.sh"
source "$SCRIPT_DIR/lib/generators/cpp_files.sh"
source "$SCRIPT_DIR/lib/generators/makefile.sh"
source "$SCRIPT_DIR/lib/generators/readme.sh"
source "$SCRIPT_DIR/lib/generators/gitignore.sh"
source "$SCRIPT_DIR/lib/generators/license.sh"

# ============================================================================
# DEFAULT FLAGS AND VARIABLES
# ============================================================================
FLAG_MINIMAL=false
FLAG_NO_GIT=false
FLAG_QUIET=false
FLAG_VERBOSE=false
FLAG_DRY_RUN=false
FLAG_FORCE=false
FLAG_INIT_ONLY=false
FLAG_ASCII=true
FLAG_NON_INTERACTIVE=false

AUTHOR_NAME="$(whoami)"
LICENSE_TYPE="MIT"
BUILD_MODE="Debug"
PROJECT_NAME=""
PROJECT_ROOT=""

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================
show_help() {
    print_banner
    cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS] [PROJECT_NAME]

Professional C++ Project Initializer

Options:
  -h, --help            Show this help
  -v, --version         Show version
  -m, --minimal         Create minimal project (no tests)
  -g, --no-git          Do not initialize git
  -q, --quiet           Suppress output
  -V, --verbose         Enable verbose output
  -n, --dry-run         Do not make changes
  -f, --force           Overwrite existing directory
  -i, --init-only       Only create directory structure
  -a, --no-ascii        Disable ASCII banner
  -y, --non-interactive Run with defaults
  --author <name>       Specify author
  --license <type>      License type (MIT, GPL-3.0, Apache-2.0)
  --mode <mode>         Build mode (Debug, Release)

Examples:
  ${SCRIPT_NAME} MyProject
  ${SCRIPT_NAME} --minimal --no-git MyMinimalProject
EOF
}

parse_args() {
    while (( "$#" > 0 )); do
        case "$1" in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                print_color "$GREEN" "${SCRIPT_NAME} version ${SCRIPT_VERSION}"
                exit 0
                ;;
            -m|--minimal) FLAG_MINIMAL=true ;;
            -g|--no-git) FLAG_NO_GIT=true ;;
            -q|--quiet) FLAG_QUIET=true ;;
            -V|--verbose) FLAG_VERBOSE=true ;;
            -n|--dry-run) FLAG_DRY_RUN=true ;;
            -f|--force) FLAG_FORCE=true ;;
            -i|--init-only) FLAG_INIT_ONLY=true ;;
            -a|--no-ascii) FLAG_ASCII=false ;;
            -y|--non-interactive) FLAG_NON_INTERACTIVE=true ;;
            --author)
                if [[ -n "$2" && "$2" != -* ]]; then
                    AUTHOR_NAME="$2"
                    shift
                else
                    print_error "--author requires a value"
                    exit 1
                fi
                ;;
            --license)
                if [[ -n "$2" && "$2" != -* ]]; then
                    LICENSE_TYPE="$2"
                    shift
                else
                    print_error "--license requires a value"
                    exit 1
                fi
                ;;
            --mode)
                if [[ -n "$2" && "$2" != -* ]]; then
                    BUILD_MODE="$2"
                    shift
                else
                    print_error "--mode requires a value"
                    exit 1
                fi
                ;;
            -*)
                print_error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                if [[ -z "$PROJECT_NAME" ]]; then
                    PROJECT_NAME="$1"
                else
                    print_error "Project name already set to \"$PROJECT_NAME\""
                    show_help
                    exit 1
                fi
                ;;
        esac
        shift
    done
}

# ============================================================================
# MAIN FUNCTION
# ============================================================================
main() {
    parse_args "$@"

    print_banner

    check_prerequisites

    # Interactive setup if needed
    if [[ "$FLAG_NON_INTERACTIVE" != true && -z "$PROJECT_NAME" ]]; then
        interactive_setup
    fi

    if [[ -z "$PROJECT_NAME" ]]; then
        print_error "Project name is required. Use -y or provide a name."
        exit 1
    fi

    PROJECT_ROOT="$(pwd)/$PROJECT_NAME"

    if ! check_directory_conflict "$PROJECT_ROOT"; then
        exit 1
    fi

    print_info "Initializing C++ project: ${BOLD}${PROJECT_NAME}${RESET}"
    print_verbose "Project root: $PROJECT_ROOT"
    print_verbose "Author: $AUTHOR_NAME"
    print_verbose "License: $LICENSE_TYPE"
    print_verbose "Build Mode: $BUILD_MODE"

    # Create directory structure
    create_directories

    # Generate project files
    generate_main_cpp
    generate_header
    generate_implementation
    generate_test_file
    generate_makefile
    generate_readme
    generate_gitignore
    generate_license

    # Initialize Git if enabled
    if [[ "$FLAG_NO_GIT" != true ]]; then
        print_info "Initializing Git repository..."
        if [[ "$FLAG_DRY_RUN" == true ]]; then
            print_warning "DRY RUN: Would initialize Git repository"
        else
            git -C "$PROJECT_ROOT" init -b main >/dev/null 2>&1
            print_success "Git repository initialized"
        fi
    fi

    print_separator
    print_success "Project \"${PROJECT_NAME}\" created successfully!"
    print_info "Next steps:"
    print_info "  cd ${PROJECT_NAME}"
    print_info "  make build"
    print_info "  make run"
    print_separator
}

main "$@"
